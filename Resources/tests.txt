import TestProblems.problem

import MachineLearning.network as net
import MachineLearning.network_problem

import numpy as np

#f1 = lambda x: (x - 2) ** 2
#g1 = lambda x: 2 * (x - 2)

#op_prob = lambda x: (f1(x), g1(x))

#x01 = 0

#f2 = lambda x: (x[0] - 1) ** 2 + (x[1] - 1) ** 2
#g2 = lambda x: np.array([2 * (x[0] - 1), 2 * (x[1] - 1)])
#x02 = np.array([0, 0])

#f3 = lambda x: (1.5 - x[0] + x[0] * x[1]) ** 2 + (2.25 - x[0] + x[0] * x[1] ** 2) ** 2 + (
#        2.625 - x[0] + x[0] * x[1] ** 3) ** 2
#g3 = lambda x: np.array([1, 1])
#x03 = np.array([1, 1])

#p = TestProblems.problem.Problem(None, None, x01, optim="GD", cond="obj", name="f2polyak",
#                                optim_options={'eta': 4 * 10 ** (-3)}, op_func=op_prob)
#p.solve()
#p.save()
#print(len(p.result.data['trace']))

n = net.Network([2, 100, 2])
#print(n.feed_forward([[1, 1, 0, 0], [1, 0, 1, 0]]))

#for i in range(1000):
#    f, w, b = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]))
#    n.weights = [w1 - 3 * w2 for w1, w2 in zip(n.weights, w)]
#    n.biases = [w1 - 3 * w2 for w1, w2 in zip(n.biases, b)]

#print(n.feed_forward([[1, 1, 0, 0], [1, 0, 1, 0]]))

npb = MachineLearning.network_problem.NetworkProblem(n, [1, 1, 0, 0], [1])


w, b = n.random_weights_and_biases()
for i in range(len(w)):
    for j in range(len(w[i])):
        for k in range(len(w[i][j])):

            w[i][j][k] = w[i][j][k] - 0.0001
            f1, _, _ = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]), weights=w, biases=b)

            w[i][j][k] = w[i][j][k] + 0.0002
            f2, _, _ = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]), weights=w, biases=b)

            w[i][j][k] = w[i][j][k] - 0.0001
            _, nw, nb = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]), weights=w, biases=b)
            if np.abs((f2 - f1) / 0.0002 - nw[i][j][k]) > 0.00000001:
                print(np.abs((f2 - f1) / 0.0002 - nw[i][j][k]))
                print("Nu e bun algoritmul")
                break

print("e bun alg")


for i in range(len(b)):
    for j in range(len(b[i])):
        for k in range(len(b[i][j])):

            b[i][j][k] = b[i][j][k] - 0.0001
            f1, _, _ = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]), weights=w, biases=b)

            b[i][j][k] = b[i][j][k] + 0.0002
            f2, _, _ = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]), weights=w, biases=b)

            b[i][j][k] = b[i][j][k] - 0.0001
            _, nw, nb = n.back_propagation(np.array([[1, 1, 0, 0], [1, 0, 1, 0]]), np.array([[1, 0, 0, 0], [1, 0, 0, 0]]), weights=w, biases=b)
            if np.abs((f2 - f1) / 0.0002 - nb[i][j][k]) > 0.00000001:
                print(np.abs((f2 - f1) / 0.0002 - nb[i][j][k]))
                print("Nu e bun algoritmul")
                break

print("e bun alg")

n = net.Network([2, 3, 1])
npb = MachineLearning.network_problem.NetworkProblem(n, np.array([[1, 1, 0, 0], [1, 0, 1, 0]]),
                                                     np.array([[1, 0, 0, 0]]), optim="Polyak",
                                                     optim_options={'eta': 3})
npb.optimize()
n.save_to_file("Test.txt")

net2 = net.Network.load_from_file("Test.txt")
npb.problem.save("merge.txt")

pb = TestProblems.problem.Problem.from_file("merge.txt")

print(pb.optim_options)

print(n.weights[0] - n.weights[0])

n = net.Network([2, 3, 1])
print(n.feed_forward(np.array([[1, 1, 0, 0], [1, 0, 1, 0]])))
npb = MachineLearning.network_problem.NetworkProblem(n, np.array([[1, 1, 0, 0], [1, 0, 1, 0]]),
                                                     np.array([[1, 0, 0, 0]]), optim="Polyak",
                                                     optim_options={'eta': 3}, iter_print_gap=0)
npb.optimize()
n.save_to_file("Test.txt")

net2 = net.Network.load_from_file("Test.txt")
npb.problem.save("merge.txt")

pb = TestProblems.problem.Problem.from_file("merge.txt")

#print(pb.optim_options)

#print(n.weights[0] - n.weights[0])


print(n.feed_forward(np.array([[1, 1, 0, 0], [1, 0, 1, 0]])))

print(net2.feed_forward(np.array([[1, 1, 0, 0], [1, 0, 1, 0]])))